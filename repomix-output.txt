This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-12T22:55:18.884Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitignore
.history/docker-compose_20250102142703.yml
.history/docker-compose_20250112233539.yml
.history/README_20250102142703.md
.history/README_20250113000939.md
.history/README_20250113000943.md
.idx/dev.nix
admin.html
config.ts
docker-compose.yml
Dockerfile
index.html
js/admin.js
js/api.js
js/keypad.js
models/index.ts
package.json
README.md
server.js
server.ts
start.sh
styles/admin.css
styles/main.css
tsconfig.json

================================================================
Files
================================================================

================
File: .gitignore
================
.codegpt

================
File: .history/docker-compose_20250102142703.yml
================
version: '3.8'

services:
  door-access:
    build: .
    container_name: door-access
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/dooraccess
    restart: always
    networks:
      - door-network
    depends_on:
      - mongodb

  mongodb:
    image: mongo:latest
    container_name: mongodb
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    ports:
      - "27017:27017"
    networks:
      - door-network
    restart: always
    command: mongod --bind_ip 0.0.0.0

volumes:
  mongodb_data:
    name: door-access-mongodb-data
  mongodb_config:
    name: door-access-mongodb-config

networks:
  door-network:
    name: door-access-network
    driver: bridge

================
File: .history/docker-compose_20250112233539.yml
================
version: '3.8'

services:
  door-access:
    build: .
    container_name: door-access
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/dooraccess
    restart: always
    networks:
      - door-network
    depends_on:
      - mongodb

  mongodb:
    image: mongo:latest
    container_name: mongodb
    volumes:
      - /root/storage/nongodb/db:/data/db
      - /root/storage/nongodb/config:/data/configdb
    ports:
      - "27017:27017"
    networks:
      - door-network
    restart: always
    command: mongod --bind_ip 0.0.0.0


networks:
  door-network:
    name: door-access-network
    driver: bridge

================
File: .history/README_20250102142703.md
================
Get started by customizing your environment (defined in the .idx/dev.nix file) with the tools and IDE extensions you'll need for your project!

Learn more at https://developers.google.com/idx/guides/customize-idx-env

# Door Access System

A modern web-based door access control system with guest code generation capabilities.

## Features

- Modern, responsive touch interface: Touch-friendly design with smooth animations.
- Secure access code verification
- Single-use guest code generation
- Admin panel for access management
- Real-time door control via Tasmota API
- Access logging and monitoring
- Network-accessible from any device
- Supports multiple simultaneous users
- Works on phones, tablets, and computers

## Running the Application

    ### Standard Method


1. Start the server:

    ```bash
    ./start.sh


2. Access the application:
    On host machine: http://localhost:8000
    From other devices: http://YOUR_IP:8000 (IP shown in terminal)

    ### Docker Method

1. Build and start the container:
    ```bash
    docker-compose up -d


2. Access the application:
    On host machine: http://localhost:8000

    From other devices: http://YOUR_IP:8000 (replace YOUR_IP with the IP address shown in the terminal)


3. View logs:

    ```bash
    docker-compose logs -f

4. Stop the container:
    ```bash
    docker-compose down


## Default Access

The app provides innitial access after installation: 
    - Admin code: 1234
    - Use this code to:
        - Access admin panel
        - Generate guest codes
        - Manage access


## Network access

The application is accessible from any device on the same network:
    - Use the host's IP address shown in terminal
    - Default port: 8000
    - Supports multiple simultaneous users
    - Works on phones, tablets, and computers

## System Requirements

Standard Installation
    - Node.js 18 or higher
    - Modern web browser

Docker Installation
    - Docker
    - Docker Compose

## Troubleshooting

1. Port already in use: 
    ```bash
        # Check what's using port 8000
        lsof -i :8000
        # Kill existing process
        kill $(lsof -t -i:8000)
    ```

2. Docker issues:
    ```bash
        # Rebuild container
        docker-compose build --no-cache
        # Clean start
        docker-compose down && docker-compose up -d
    ```


3. Network access issues:
    - Ensure devices are on the same network
    - Check firewall settings
    - Verify port 8000 is open

## Security Notes

- Keep admin codes secure
- Guest codes are single-use only
- All access attempts are logged
- Admin verification required for sensitive operations


## Development

### Running Development Mode
    ```bash
    # Install dependencies
    npm install
    
    # Start with auto-reload
    npm run dev
    ```


### Docker Development

    ```bash
        # Build with changes
        docker-compose build
    
        # # \Start with volume mountin
        docker-compose up

================
File: .history/README_20250113000939.md
================
Get started by customizing your environment (defined in the .idx/dev.nix file) with the tools and IDE extensions you'll need for your project!

Learn more at https://developers.google.com/idx/guides/customize-idx-env

# Door Access System

A modern web-based door access control system with guest code generation capabilities.

## Features

- Modern, responsive touch interface: Touch-friendly design with smooth animations.
- Secure access code verification
- Single-use guest code generation
- Admin panel for access management
- Real-time door control via Tasmota API
- Access logging and monitoring
- Network-accessible from any device
- Supports multiple simultaneous users
- Works on phones, tablets, and computers

## Running the Application

    ### Standard Method


1. Start the server:

    ```bash
    ./start.sh


2. Access the application:
    On host machine: http://localhost:8000
    From other devices: http://YOUR_IP:8000 (IP shown in terminal)

    ### Docker Method

1. Build and start the container:
    ```bash
    docker compose up -d


2. Access the application:
    On host machine: http://localhost:8000

    From other devices: http://YOUR_IP:8000 (replace YOUR_IP with the IP address shown in the terminal)


3. View logs:

    ```bash
    docker compose logs -f

4. Stop the container:
    ```bash
    docker compose down


## Default Access

The app provides innitial access after installation: 
    - Admin code: 1234
    - Use this code to:
        - Access admin panel
        - Generate guest codes
        - Manage access


## Network access

The application is accessible from any device on the same network:
    - Use the host's IP address shown in terminal
    - Default port: 8000
    - Supports multiple simultaneous users
    - Works on phones, tablets, and computers

## System Requirements

Standard Installation
    - Node.js 18 or higher
    - Modern web browser

Docker Installation
    - Docker
    - Docker Compose

## Troubleshooting

1. Port already in use: 
    ```bash
        # Check what's using port 8000
        lsof -i :8000
        # Kill existing process
        kill $(lsof -t -i:8000)
    ```

2. Docker issues:
    ```bash
        # Rebuild container
        docker compose build --no-cache
        # Clean start
        docker compose down && docker compose up -d
    ```


3. Network access issues:
    - Ensure devices are on the same network
    - Check firewall settings
    - Verify port 8000 is open

## Security Notes

- Keep admin codes secure
- Guest codes are single-use only
- All access attempts are logged
- Admin verification required for sensitive operations


## Development

### Running Development Mode
    ```bash
    # Install dependencies
    npm install
    
    # Start with auto-reload
    npm run dev
    ```


### Docker Development

    ```bash
        # Build with changes
        docker compose build
    
        # # \Start with volume mountin
        docker compose up

================
File: .history/README_20250113000943.md
================
Get started by customizing your environment (defined in the .idx/dev.nix file) with the tools and IDE extensions you'll need for your project!

Learn more at https://developers.google.com/idx/guides/customize-idx-env

# Door Access System

A modern web-based door access control system with guest code generation capabilities.

## Features

- Modern, responsive touch interface: Touch-friendly design with smooth animations.
- Secure access code verification
- Single-use guest code generation
- Admin panel for access management
- Real-time door control via Tasmota API
- Access logging and monitoring
- Network-accessible from any device
- Supports multiple simultaneous users
- Works on phones, tablets, and computers

## Running the Application

    ### Standard Method


1. Start the server:

    ```bash
    ./start.sh


2. Access the application:
    On host machine: http://localhost:8000
    From other devices: http://YOUR_IP:8000 (IP shown in terminal)

    ### Docker Method

1. Build and start the container:
    ```bash
    docker compose up -d


2. Access the application:
    On host machine: http://localhost:8000

    From other devices: http://YOUR_IP:8000 (replace YOUR_IP with the IP address shown in the terminal)


3. View logs:

    ```bash
    docker compose logs -f

4. Stop the container:
    ```bash
    docker compose down


## Default Access

The app provides innitial access after installation: 
    - Admin code: 1234
    - Use this code to:
        - Access admin panel
        - Generate guest codes
        - Manage access


## Network access

The application is accessible from any device on the same network:
    - Use the host's IP address shown in terminal
    - Default port: 8000
    - Supports multiple simultaneous users
    - Works on phones, tablets, and computers

## System Requirements

Standard Installation
    - Node.js 18 or higher
    - Modern web browser

Docker Installation
    - Docker
    - Docker Compose

## Troubleshooting

1. Port already in use: 
    ```bash
        # Check what's using port 8000
        lsof -i :8000
        # Kill existing process
        kill $(lsof -t -i:8000)
    ```

2. Docker issues:
    ```bash
        # Rebuild container
        docker compose build --no-cache
        # Clean start
        docker compose down && docker compose up -d
    ```


3. Network access issues:
    - Ensure devices are on the same network
    - Check firewall settings
    - Verify port 8000 is open

## Security Notes

- Keep admin codes secure
- Guest codes are single-use only
- All access attempts are logged
- Admin verification required for sensitive operations


## Development

### Running Development Mode
    ```bash
    # Install dependencies
    npm install
    
    # Start with auto-reload
    npm run dev
    ```


### Docker Development

    ```bash
        # Build with changes
        docker compose build
    
        # # \Start with volume mountin
        docker compose up

================
File: .idx/dev.nix
================
# To learn more about how to use Nix to configure your environment
# see: https://developers.google.com/idx/guides/customize-idx-env
{ pkgs, ... }: {
  # Which nixpkgs channel to use.
  channel = "stable-24.05"; # or "unstable"
  # Use https://search.nixos.org/packages to find packages
  packages = [
    pkgs.nodejs_20
    pkgs.docker
    pkgs.docker-compose
    pkgs.nodePackages.nodemon
  ];
  # Sets environment variables in the workspace
  env = {};
  idx = {
    # Search for the extensions you want on https://open-vsx.org/ and use "publisher.id"
    extensions = [
      # "vscodevim.vim"
    ];
    # Enable previews
    previews = {
      enable = true;
      previews = {
        # web = {
        #   # Example: run "npm run dev" with PORT set to IDX's defined port for previews,
        #   # and show it in IDX's web preview panel
        #   command = ["npm" "run" "dev"];
        #   manager = "web";
        #   env = {
        #     # Environment variables to set for your server
        #     PORT = "$PORT";
        #   };
        # };
      };
    };
    # Workspace lifecycle hooks
    workspace = {
      # Runs when a workspace is first created
      onCreate = {
        # Example: install JS dependencies from NPM
        # npm-install = "npm install";
        # Open editors for the following files by default, if they exist:
        default.openFiles = [ ".idx/dev.nix" "README.md" ];
      };
      # Runs when the workspace is (re)started
      onStart = {
        # Example: start a background task to watch and re-build backend code
        # watch-backend = "npm run watch-backend";
      };
    };
  };
}

================
File: admin.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Door Access - Admin Panel</title>
    <link rel="stylesheet" href="styles/main.css">
    <link rel="stylesheet" href="styles/admin.css">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&display=swap" rel="stylesheet">
    <script>
        // Security check - prevent direct URL access
        function checkAdminAccess() {
            const adminAccess = sessionStorage.getItem('adminAccess');
            if (!adminAccess) {
                alert('Unauthorized access. Please use admin code at keypad.');
                window.location.href = 'index.html';
            }
        }
        checkAdminAccess();
    </script>
</head>
<body>
    <div class="admin-container">
        <header>
            <h1>Admin Panel</h1>
            <a href="index.html" class="back-link" onclick="sessionStorage.removeItem('adminAccess')">Back to Keypad</a>
        </header>

        <div class="admin-content">
            <div class="section">
                <h2>Access Codes</h2>
                <button id="addCodeBtn" class="action-button">Add New Code</button>
                <div class="codes-list" id="codesList">
                    <!-- Codes will be populated here -->
                </div>
            </div>

            <div class="section">
                <h2>Access Logs</h2>
                <div class="logs-list" id="logsList">
                    <!-- Logs will be populated here -->
                </div>
            </div>
        </div>

        <!-- Add Code Modal -->
        <div id="addCodeModal" class="modal">
            <div class="modal-content">
                <h2>Add New Access Code</h2>
                <form id="addCodeForm">
                    <div class="form-group">
                        <label for="code">Access Code:</label>
                        <input type="text" id="code" required pattern="[0-9]{4,6}" maxlength="6">
                    </div>
                    <div class="form-group">
                        <label for="user">User Name:</label>
                        <input type="text" id="user" required>
                    </div>
                    <div class="form-group">
                        <label for="unit">Unit/Apartment:</label>
                        <input type="text" id="unit" required>
                    </div>
                    <div class="form-group checkbox">
                        <label>
                            <input type="checkbox" id="isAdmin">
                            Admin Access
                        </label>
                    </div>
                    <div class="form-actions">
                        <button type="button" class="cancel-button" onclick="window.adminPanel.closeModal()">Cancel</button>
                        <button type="submit" class="submit-button">Add Code</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <script src="js/api.js"></script>
    <script src="js/admin.js"></script>
</body>
</html>

================
File: config.ts
================
// Application Configuration

// MongoDB Connection URI
// - Replace 'localhost' with the hostname or IP address of your MongoDB server
// - Replace '27017' with the port number on which your MongoDB server is running
// - Replace 'dooraccess' with the name of the database you want to use
export const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/dooraccess';

// Application Port
// - Set the port number on which the application server should run
export const PORT = parseInt(process.env.PORT || '8000', 10);

// Admin User
// - Set the username for the admin user
export const ADMIN_USERNAME = process.env.ADMIN_USERNAME || 'admin';

// Admin Password
// - Set the password for the admin user
export const ADMIN_PASSWORD = process.env.ADMIN_PASSWORD || 'password';

================
File: docker-compose.yml
================
version: '3.8'

services:
  door-access:
    build: .
    container_name: door-access
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/dooraccess
    restart: always
    networks:
      - door-network
    depends_on:
      - mongodb

  mongodb:
    image: mongo:latest
    container_name: mongodb
    volumes:
      - /root/storage/nongodb/db:/data/db
      - /root/storage/nongodb/config:/data/configdb
    ports:
      - "27017:27017"
    networks:
      - door-network
    restart: always
    command: mongod --bind_ip 0.0.0.0


networks:
  door-network:
    name: door-access-network
    driver: bridge

================
File: Dockerfile
================
FROM node:18-alpine

WORKDIR /app

# Copy package files
# Copy application files
COPY . .

# Install dependencies
RUN npm install

# Build TypeScript
RUN npm run build

# Expose port 8000
EXPOSE 8000

# Start the application
CMD ["npm", "start"]

================
File: index.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="theme-color" content="#1a1a1a">
    <title>Building Access Control</title>
    <link rel="stylesheet" href="styles/main.css">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
</head>
<body>
    <div class="container">
        <header>
            <h1>Door Access</h1>
            <div class="time" id="currentTime"></div>
        </header>
        
        <div class="keypad-container">
            <div class="display" id="display">
                <span class="display-text" id="displayText">Enter Access Code</span>
                <div class="display-dots"></div>
            </div>
            
            <div class="keypad">
                <button class="key" data-key="1">1</button>
                <button class="key" data-key="2">2</button>
                <button class="key" data-key="3">3</button>
                <button class="key" data-key="4">4</button>
                <button class="key" data-key="5">5</button>
                <button class="key" data-key="6">6</button>
                <button class="key" data-key="7">7</button>
                <button class="key" data-key="8">8</button>
                <button class="key" data-key="9">9</button>
                <button class="key clear" data-key="clear">⌫</button>
                <button class="key" data-key="0">0</button>
                <button class="key enter" data-key="enter">✓</button>
            </div>
        </div>

        <div id="status" class="status"></div>
    </div>

    <!-- Admin Access -->
    <div class="admin-access">
        <button id="adminButton" class="admin-button">
            Access Admin Panel
        </button>
    </div>

    <!-- Guest Code Generator -->
    <div class="guest-access">
        <button id="guestButton" class="guest-button">
            Generate Guest Code
        </button>
    </div>

    <!-- Guest Code Display Modal -->
    <div id="guestCodeModal" class="modal">
        <div class="modal-content">
            <h2>Guest Access Code</h2>
            <div class="guest-code-display">
                <div class="code" id="guestCode"></div>
                <p class="code-info">This code can be used once for guest access</p>
            </div>
            <div class="modal-actions">
                <button class="copy-button" id="copyCode">Copy Code</button>
                <button class="close-button" id="closeGuestModal">Close</button>
            </div>
        </div>
    </div>

    <script src="js/api.js"></script>
    <script src="js/keypad.js"></script>
    <script>
        // Update time display
        function updateTime() {
            const timeElement = document.getElementById('currentTime');
            const now = new Date();
            timeElement.textContent = now.toLocaleTimeString('en-US', {
                hour: '2-digit',
                minute: '2-digit',
                hour12: true
            });
        }
        
        updateTime();
        setInterval(updateTime, 1000);

        // Admin mode handling
        const adminButton = document.getElementById('adminButton');
        adminButton.addEventListener('click', () => {
            window.keypad.setAdminMode(true);
        });

        // Guest code handling
        const guestButton = document.getElementById('guestButton');
        const guestCodeModal = document.getElementById('guestCodeModal');
        const closeGuestModal = document.getElementById('closeGuestModal');
        const copyCode = document.getElementById('copyCode');

        guestButton.addEventListener('click', () => {
            window.keypad.setGuestMode(true);
        });

        closeGuestModal.addEventListener('click', () => {
            guestCodeModal.classList.remove('active');
        });

        copyCode.addEventListener('click', async () => {
            const codeElement = document.getElementById('guestCode');
            try {
                await navigator.clipboard.writeText(codeElement.textContent);
                copyCode.textContent = 'Copied!';
                setTimeout(() => {
                    copyCode.textContent = 'Copy Code';
                }, 2000);
            } catch (err) {
                console.error('Failed to copy code:', err);
            }
        });

        // Keep screen awake
        async function keepScreenAwake() {
            try {
                if ('wakeLock' in navigator) {
                    const wakeLock = await navigator.wakeLock.request('screen');
                }
            } catch (err) {
                console.log('Wake Lock error:', err);
            }
        }
        keepScreenAwake();
    </script>
</body>
</html>

================
File: js/admin.js
================
class AdminPanel {
    constructor() {
        this.modal = document.getElementById('addCodeModal');
        this.addCodeForm = document.getElementById('addCodeForm');
        this.addCodeBtn = document.getElementById('addCodeBtn');
        this.codesList = document.getElementById('codesList');
        this.logsList = document.getElementById('logsList');

        this.setupEventListeners();
        this.refreshData();
    }

    setupEventListeners() {
        // Add code button
        this.addCodeBtn.addEventListener('click', () => this.openModal());

        // Form submission
        this.addCodeForm.addEventListener('submit', (e) => {
            e.preventDefault();
            this.handleAddCode();
        });

        // Refresh data every 30 seconds
        setInterval(() => this.refreshData(), 30000);
    }

    refreshData() {
        this.displayAccessCodes();
        this.displayLogs();
    }

    openModal() {
        this.modal.classList.add('active');
    }

    closeModal() {
        this.modal.classList.remove('active');
        this.addCodeForm.reset();
    }

    handleAddCode() {
        const code = document.getElementById('code').value;
        const user = document.getElementById('user').value;
        const unit = document.getElementById('unit').value;
        const isAdmin = document.getElementById('isAdmin').checked;

        // Validate code format
        if (!/^\d{4,6}$/.test(code)) {
            alert('Code must be 4-6 digits');
            return;
        }

        // Check if code already exists
        const existingCodes = window.doorAPI.getAccessCodes();
        if (existingCodes.some(c => c.code === code)) {
            alert('This code already exists');
            return;
        }

        window.doorAPI.addAccessCode(code, user, unit, isAdmin);
        this.closeModal();
        this.displayAccessCodes();
    }

    displayAccessCodes() {
        const codes = window.doorAPI.getAccessCodes();
        this.codesList.innerHTML = codes.map(code => `
            <div class="code-item">
                <div>${code.code}</div>
                <div>${code.user}</div>
                <div>${code.unit}</div>
                <button class="delete-btn" onclick="window.adminPanel.deleteCode('${code.code}')">
                    Delete
                </button>
            </div>
        `).join('');
    }

    deleteCode(code) {
        // Prevent deleting the last admin code
        const codes = window.doorAPI.getAccessCodes();
        const adminCodes = codes.filter(c => c.isAdmin);
        const targetCode = codes.find(c => c.code === code);

        if (targetCode.isAdmin && adminCodes.length === 1) {
            alert('Cannot delete the last admin code');
            return;
        }

        if (confirm('Are you sure you want to delete this code?')) {
            window.doorAPI.removeAccessCode(code);
            this.displayAccessCodes();
        }
    }

    displayLogs() {
        const logs = window.doorAPI.getLogs();
        this.logsList.innerHTML = logs.map(log => `
            <div class="log-item">
                <div class="timestamp">
                    ${new Date(log.timestamp).toLocaleString()}
                </div>
                <div>
                    ${log.user} (${log.unit})
                </div>
                <div class="${log.success ? 'success' : 'failure'}">
                    ${log.success ? '✓ Access Granted' : '✗ Access Denied'}
                </div>
            </div>
        `).join('');
    }
}

// Initialize admin panel when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    // Check if user has admin access
    const urlParams = new URLSearchParams(window.location.search);
    const fromKeypad = urlParams.get('fromKeypad');
    
    if (!fromKeypad) {
        const codes = window.doorAPI.getAccessCodes();
        const hasAdminCode = codes.some(code => code.isAdmin);
        
        if (!hasAdminCode) {
            alert('Access denied. Please use admin code at keypad.');
            window.location.href = 'index.html';
            return;
        }
    }

    window.adminPanel = new AdminPanel();
});

================
File: js/api.js
================
class DoorAPI {
    constructor() {
        this.tasmotaUrl = 'https://door12.rsl7.eu';
        this.apiBaseUrl = window.location.origin;
    }

    // Helper method for API calls
    async fetchAPI(endpoint, options = {}) {
        const response = await fetch(`${this.apiBaseUrl}/api/${endpoint}`, {
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });

        if (!response.ok) {
            throw new Error(`API call failed: ${response.statusText}`);
        }

        return response.json();
    }

    // Verify access code
    async verifyCode(code) {
        try {
            const result = await this.fetchAPI('verify', {
                method: 'POST',
                body: JSON.stringify({ code })
            });
            return result;
        } catch (error) {
            console.error('Verification error:', error);
            return null;
        }
    }

    // Create a new guest code
    async createGuestCode() {
        try {
            const result = await this.fetchAPI('guest-codes', {
                method: 'POST'
            });
            return result.code;
        } catch (error) {
            console.error('Guest code creation error:', error);
            return null;
        }
    }

    // Add new access code (admin only)
    async addAccessCode(code, user, unit, isAdmin = false) {
        try {
            await this.fetchAPI('access-codes', {
                method: 'POST',
                body: JSON.stringify({ code, user, unit, isAdmin })
            });
        } catch (error) {
            console.error('Add access code error:', error);
            throw error;
        }
    }

    // Remove access code (admin only)
    async removeAccessCode(code) {
        try {
            await this.fetchAPI(`access-codes/${code}`, {
                method: 'DELETE'
            });
        } catch (error) {
            console.error('Remove access code error:', error);
            throw error;
        }
    }

    // Get all logs (admin only)
    async getLogs() {
        try {
            return await this.fetchAPI('logs');
        } catch (error) {
            console.error('Get logs error:', error);
            return [];
        }
    }

    // Get all access codes (admin only)
    async getAccessCodes() {
        try {
            return await this.fetchAPI('access-codes');
        } catch (error) {
            console.error('Get access codes error:', error);
            return [];
        }
    }

    // Get all guest codes (admin only)
    async getGuestCodes() {
        try {
            return await this.fetchAPI('guest-codes');
        } catch (error) {
            console.error('Get guest codes error:', error);
            return [];
        }
    }

    // Toggle door lock via Tasmota switch
    async toggleDoor() {
        try {
            const response = await fetch(`${this.tasmotaUrl}/cm?cmnd=Power%20TOGGLE`, {
                method: 'GET',
                mode: 'no-cors',
                cache: 'no-cache',
                credentials: 'omit',
                headers: {
                    'Accept': '*/*'
                }
            });
            
            console.log('Door toggled successfully');
            return true;
        } catch (error) {
            console.error('Door toggle error:', error);
            return false;
        }
    }
}

// Create global instance
window.doorAPI = new DoorAPI();

================
File: js/keypad.js
================
class Keypad {
    constructor() {
        this.currentCode = '';
        this.display = document.getElementById('display');
        this.displayText = document.getElementById('displayText');
        this.displayDots = this.display.querySelector('.display-dots');
        this.status = document.getElementById('status');
        this.maxCodeLength = 6;
        this.isProcessing = false;
        this.isAdminMode = false;
        this.isGuestMode = false;
        this.submitTimeout = null;
        this.submitDelay = 1500; // 1.5 seconds
        
        this.setupEventListeners();
        this.updateDots();
    }

    setupEventListeners() {
        document.querySelectorAll('.key').forEach(key => {
            key.addEventListener('click', (e) => {
                if (this.isProcessing) return;
                this.provideHapticFeedback();
                this.animateKeyPress(e.target);
                this.handleKeyPress(e);
            });

            key.addEventListener('touchstart', () => {
                if (this.isProcessing) return;
                key.classList.add('active');
            });

            key.addEventListener('touchend', () => {
                key.classList.remove('active');
            });
        });

        document.addEventListener('keydown', (e) => {
            if (this.isProcessing) return;
            const key = document.querySelector(`[data-key="${e.key}"]`);
            if (key) {
                key.classList.add('active');
                this.animateKeyPress(key);
            }

            if (e.key >= '0' && e.key <= '9') {
                this.addDigit(e.key);
            } else if (e.key === 'Enter') {
                this.submitCode();
            } else if (e.key === 'Escape' || e.key === 'Backspace') {
                if (e.key === 'Escape' && (this.isAdminMode || this.isGuestMode)) {
                    this.resetMode();
                } else {
                    this.clearLastDigit();
                }
            }
        });

        document.addEventListener('keyup', (e) => {
            const key = document.querySelector(`[data-key="${e.key}"]`);
            if (key) {
                key.classList.remove('active');
            }
        });
    }

    resetMode() {
        this.isAdminMode = false;
        this.isGuestMode = false;
        this.currentCode = '';
        this.updateDots();
        this.clearSubmitTimeout();
        this.displayText.textContent = 'Enter Access Code';
        this.display.classList.remove('admin-mode', 'guest-mode');
        document.querySelector('.admin-button')?.classList.remove('active');
        document.querySelector('.guest-button')?.classList.remove('active');
        this.animateDisplay();
    }

    setAdminMode(enabled) {
        this.resetMode();
        if (enabled) {
            this.isAdminMode = true;
            this.displayText.textContent = 'Enter Admin Code';
            this.display.classList.add('admin-mode');
            document.querySelector('.admin-button').classList.add('active');
            this.animateDisplay();
        }
    }

    setGuestMode(enabled) {
        this.resetMode();
        if (enabled) {
            this.isGuestMode = true;
            this.displayText.textContent = 'Enter Admin Code for Guest Access';
            this.display.classList.add('guest-mode');
            document.querySelector('.guest-button').classList.add('active');
            this.animateDisplay();
        }
    }

    clearSubmitTimeout() {
        if (this.submitTimeout) {
            clearTimeout(this.submitTimeout);
            this.submitTimeout = null;
        }
    }

    startSubmitTimeout() {
        this.clearSubmitTimeout();
        if (this.currentCode.length > 0) {
            this.submitTimeout = setTimeout(() => {
                this.submitCode();
            }, this.submitDelay);
        }
    }

    animateKeyPress(key) {
        key.classList.add('pressed');
        setTimeout(() => {
            key.classList.remove('pressed');
        }, 150);
    }

    provideHapticFeedback() {
        if ('vibrate' in navigator) {
            navigator.vibrate(30);
        }
    }

    handleKeyPress(e) {
        const key = e.target.dataset.key;
        
        if (key === 'clear') {
            this.clearLastDigit();
        } else if (key === 'enter') {
            this.submitCode();
        } else {
            this.addDigit(key);
        }
    }

    addDigit(digit) {
        if (this.currentCode.length < this.maxCodeLength && !this.isProcessing) {
            this.currentCode += digit;
            this.updateDots();
            this.animateDisplay();
            
            this.clearSubmitTimeout();

            if (this.currentCode.length === this.maxCodeLength) {
                this.submitCode();
            } else {
                this.startSubmitTimeout();
            }
        }
    }

    clearLastDigit() {
        if (this.currentCode.length > 0 && !this.isProcessing) {
            this.currentCode = this.currentCode.slice(0, -1);
            this.updateDots();
            this.animateDisplay();
            this.startSubmitTimeout();
        }
    }

    updateDots() {
        const dots = Array(this.maxCodeLength)
            .fill('<span class="dot"></span>')
            .map((dot, index) => {
                return index < this.currentCode.length ? 
                    '<span class="dot filled"></span>' : dot;
            })
            .join('');
        
        this.displayDots.innerHTML = dots;
    }

    animateDisplay() {
        this.display.classList.add('pulse');
        setTimeout(() => {
            this.display.classList.remove('pulse');
        }, 200);
    }

    async submitCode() {
        if (this.currentCode.length === 0 || this.isProcessing) return;

        this.clearSubmitTimeout();
        this.isProcessing = true;
        const accessCode = window.doorAPI.verifyCode(this.currentCode);
        
        if (this.isGuestMode) {
            if (accessCode && accessCode.isAdmin) {
                const guestCode = window.doorAPI.createGuestCode();
                const modal = document.getElementById('guestCodeModal');
                const codeDisplay = document.getElementById('guestCode');
                
                this.showStatus('Guest code generated', 'success');
                this.provideSuccessFeedback();
                
                codeDisplay.textContent = guestCode;
                modal.classList.add('active');
                this.resetMode();
            } else {
                this.showStatus('Invalid admin code', 'error');
                this.provideErrorFeedback();
                setTimeout(() => this.resetMode(), 2000);
            }
        } else if (this.isAdminMode) {
            if (accessCode && accessCode.isAdmin) {
                this.showStatus('Access granted', 'success');
                this.provideSuccessFeedback();
                sessionStorage.setItem('adminAccess', 'true');
                setTimeout(() => {
                    window.location.href = 'admin.html';
                }, 1000);
            } else {
                this.showStatus('Invalid admin code', 'error');
                this.provideErrorFeedback();
                setTimeout(() => this.resetMode(), 2000);
            }
        } else {
            if (accessCode) {
                this.showStatus('Verifying...', 'processing');
                try {
                    const success = await window.doorAPI.toggleDoor();
                    if (success) {
                        this.showStatus(`Welcome, ${accessCode.user}`, 'success');
                        this.provideSuccessFeedback();
                    } else {
                        this.showStatus('Door system error', 'error');
                        this.provideErrorFeedback();
                    }
                } catch (error) {
                    this.showStatus('System error', 'error');
                    this.provideErrorFeedback();
                }
            } else {
                this.showStatus('Invalid code', 'error');
                this.provideErrorFeedback();
            }
        }

        this.currentCode = '';
        this.updateDots();
        setTimeout(() => this.clearStatus(), 3000);
        this.isProcessing = false;
    }

    showStatus(message, type) {
        this.status.textContent = message;
        this.status.className = `status ${type}`;
        this.status.classList.add('animate-in');
        
        if ('vibrate' in navigator) {
            if (type === 'success') {
                navigator.vibrate([100, 50, 100]);
            } else if (type === 'error') {
                navigator.vibrate([250, 100, 250]);
            } else if (type === 'processing') {
                navigator.vibrate(50);
            }
        }
    }

    provideSuccessFeedback() {
        this.display.classList.add('success');
        setTimeout(() => {
            this.display.classList.remove('success');
        }, 1500);
        
        if ('vibrate' in navigator) {
            navigator.vibrate([100, 50, 100]);
        }
    }

    provideErrorFeedback() {
        this.display.classList.add('error');
        setTimeout(() => {
            this.display.classList.remove('error');
        }, 1500);
        
        if ('vibrate' in navigator) {
            navigator.vibrate([250, 100, 250]);
        }
    }

    clearStatus() {
        this.status.classList.remove('animate-in');
        setTimeout(() => {
            this.status.className = 'status';
            this.status.textContent = '';
        }, 300);
    }
}

// Initialize keypad when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    window.keypad = new Keypad();
});

================
File: models/index.ts
================
import mongoose, { Document } from 'mongoose';

// Interfaces
export interface IAccessCode extends Document {
  code: string;
  user: string;
  unit: string;
  isAdmin: boolean;
}

export interface IGuestCode extends Document {
  code: string;
  user: string;
  unit: string;
  created: Date;
  used: boolean;
}

export interface ILog extends Document {
  timestamp: Date;
  code: string;
  user: string;
  unit: string;
  success: boolean;
}

// Access Code Schema
const accessCodeSchema = new mongoose.Schema<IAccessCode>({
  code: { type: String, required: true, unique: true },
  user: { type: String, required: true },
  unit: { type: String, required: true },
  isAdmin: { type: Boolean, default: false }
});

// Guest Code Schema
const guestCodeSchema = new mongoose.Schema<IGuestCode>({
  code: { type: String, required: true, unique: true },
  user: { type: String, required: true },
  unit: { type: String, required: true },
  created: { type: Date, default: Date.now },
  used: { type: Boolean, default: false }
});

// Log Schema
const logSchema = new mongoose.Schema<ILog>({
  timestamp: { type: Date, default: Date.now },
  code: { type: String, required: true },
  user: { type: String, required: true },
  unit: { type: String, required: true },
  success: { type: Boolean, required: true }
});

// Create models
export const AccessCode = mongoose.model<IAccessCode>('AccessCode', accessCodeSchema);
export const GuestCode = mongoose.model<IGuestCode>('GuestCode', guestCodeSchema);
export const Log = mongoose.model<ILog>('Log', logSchema);

================
File: package.json
================
{
  "name": "door-access-system",
  "version": "1.0.0",
  "description": "Door access control system with guest code generation",
  "main": "dist/server.js",
  "scripts": {
    "start": "node dist/server.js",
    "build": "npx tsc",
    "dev": "ts-node server.ts"
  },
  "dependencies": {
    "@types/node": "^22.10.1",
    "body-parser": "^1.20.2",
    "cors": "^2.8.5",
    "express": "^4.18.2",
    "fs-extra": "^11.2.0",
    "mongoose": "^8.8.4"
  },
  "devDependencies": {
    "@types/express": "^4.17.21",
    "nodemon": "^2.0.22",
    "ts-node": "^10.9.1",
    "typescript": "^5.7.2"
  }
}

================
File: README.md
================
Get started by customizing your environment (defined in the .idx/dev.nix file) with the tools and IDE extensions you'll need for your project!

Learn more at https://developers.google.com/idx/guides/customize-idx-env

# Door Access System

A modern web-based door access control system with guest code generation capabilities.

## Features

- Modern, responsive touch interface: Touch-friendly design with smooth animations.
- Secure access code verification
- Single-use guest code generation
- Admin panel for access management
- Real-time door control via Tasmota API
- Access logging and monitoring
- Network-accessible from any device
- Supports multiple simultaneous users
- Works on phones, tablets, and computers

## Running the Application

    ### Standard Method


1. Start the server:

    ```bash
    ./start.sh


2. Access the application:
    On host machine: http://localhost:8000
    From other devices: http://YOUR_IP:8000 (IP shown in terminal)

    ### Docker Method

1. Build and start the container:
    ```bash
    docker compose up -d


2. Access the application:
    On host machine: http://localhost:8000

    From other devices: http://YOUR_IP:8000 (replace YOUR_IP with the IP address shown in the terminal)


3. View logs:

    ```bash
    docker compose logs -f

4. Stop the container:
    ```bash
    docker compose down


## Default Access

The app provides innitial access after installation: 
    - Admin code: 1234
    - Use this code to:
        - Access admin panel
        - Generate guest codes
        - Manage access


## Network access

The application is accessible from any device on the same network:
    - Use the host's IP address shown in terminal
    - Default port: 8000
    - Supports multiple simultaneous users
    - Works on phones, tablets, and computers

## System Requirements

Standard Installation
    - Node.js 18 or higher
    - Modern web browser

Docker Installation
    - Docker
    - Docker Compose

## Troubleshooting

1. Port already in use: 
    ```bash
        # Check what's using port 8000
        lsof -i :8000
        # Kill existing process
        kill $(lsof -t -i:8000)
    ```

2. Docker issues:
    ```bash
        # Rebuild container
        docker compose build --no-cache
        # Clean start
        docker compose down && docker compose up -d
    ```


3. Network access issues:
    - Ensure devices are on the same network
    - Check firewall settings
    - Verify port 8000 is open

## Security Notes

- Keep admin codes secure
- Guest codes are single-use only
- All access attempts are logged
- Admin verification required for sensitive operations


## Development

### Running Development Mode
    ```bash
    # Install dependencies
    npm install
    
    # Start with auto-reload
    npm run dev
    ```


### Docker Development

    ```bash
        # Build with changes
        docker compose build
    
        # # \Start with volume mountin
        docker compose up

================
File: server.js
================
const express = require('express');
const fs = require('fs');
const path = require('path');
const os = require('os');
const filePath = path.join(__dirname, 'data', 'db.json');

const app = express();
const PORT = 8000;

// Middleware
app.use(express.json());
app.use(express.static('.'));

// Read data from JSON file
function readData() {
    return JSON.parse(fs.readFileSync(filePath, 'utf8'));
}

// Write data to JSON file
function writeData(data) {
    fs.writeFileSync(filePath, JSON.stringify(data, null, 2));
}

// Initialize data if not exists
if (!fs.existsSync(filePath)) {
    writeData({
        accessCodes: [
            {
                code: '1234',
                user: 'Admin',
                unit: 'Admin',
                isAdmin: true
            }
        ],
        guestCodes: [],
        logs: []
    });
}

// API Routes

// Verify access code
app.post('/api/verify', (req, res) => {
    const { code } = req.body;
    const data = readData();
    const accessCodes = data.accessCodes;

    const accessCode = accessCodes.find(ac => ac.code === code);
    if (accessCode) {
        const log = {
            timestamp: new Date().toISOString(),
            code: accessCode.code,
            user: accessCode.user,
            unit: accessCode.unit,
            success: true
        };
        data.logs.push(log);
        writeData(data);
        res.json(accessCode);
    } else {
        res.status(401).json({ error: 'Invalid code' });
    }
});

// Create a new guest code
app.post('/api/guest-codes', (req, res) => {
    const data = readData();
    const guestCodes = data.guestCodes;
    const code = String(Math.floor(100000 + Math.random() * 900000));
    const guestCode = {
        code,
        user: 'Guest',
        unit: 'Guest Access',
        created: new Date().toISOString(),
        used: false
    };
    guestCodes.push(guestCode);
    data.guestCodes = guestCodes;
    writeData(data);
    res.json({ code: guestCode.code });
});

// Get access codes (admin only)
app.get('/api/access-codes', (req, res) => {
    const data = readData();
    res.json(data.accessCodes);
});

// Add access code (admin only)
app.post('/api/access-codes', (req, res) => {
    const data = readData();
    const accessCodes = data.accessCodes;
    const { code, user, unit, isAdmin } = req.body;
    const newAccessCode = { code, user, unit, isAdmin };
    accessCodes.push(newAccessCode);
    data.accessCodes = accessCodes;
    writeData(data);
    res.json(newAccessCode);
});

// Remove access code (admin only)
app.delete('/api/access-codes/:code', (req, res) => {
    const data = readData();
    const accessCodes = data.accessCodes;
    const index = accessCodes.findIndex(ac => ac.code === req.params.code);
    if (index !== -1) {
        accessCodes.splice(index, 1);
        data.accessCodes = accessCodes;
        writeData(data);
        res.json({ success: true });
    } else {
        res.status(404).json({ error: 'Access code not found' });
    }
});

// Get access logs (admin only)
app.get('/api/logs', (req, res) => {
    const data = readData();
    res.json(data.logs);
});

// Get guest codes (admin only)
app.get('/api/guest-codes', (req, res) => {
    const data = readData();
    res.json(data.guestCodes);
});

// Get local IP address
function getLocalIP() {
    const interfaces = os.networkInterfaces();
    for (const name of Object.keys(interfaces)) {
        for (const iface of interfaces[name]) {
            if (!iface.internal && iface.family === 'IPv4') {
                return iface.address;
            }
        }
    }
    return 'localhost';
}

// Start server
app.listen(PORT, '0.0.0.0', () => {
    const localIP = getLocalIP();
    console.log('\n🚪 Door Access System is running!');
    console.log('\nAccess the app from:');
    console.log(`- This device: http://localhost:${PORT}`);
    console.log(`- Other devices: http://${localIP}:${PORT}`);
    console.log('\nPress Ctrl+C to stop the server');
});

================
File: server.ts
================
import express, { Request, Response } from 'express';
import mongoose from 'mongoose';
import path from 'path';
import os from 'os';
import { AccessCode, GuestCode, Log, IAccessCode, IGuestCode } from './models';
import { MONGODB_URI, PORT, ADMIN_USERNAME, ADMIN_PASSWORD } from './config';

const app = express();

// Middleware
app.use(express.json());
app.use(express.static('.'));

// Connect to MongoDB
mongoose.connect(MONGODB_URI)
  .then(() => console.log('Connected to MongoDB'))
  .catch(err => console.error('MongoDB connection error:', err));

// Initialize admin user if not exists
async function initializeAdmin() {
  const adminExists = await AccessCode.findOne({ isAdmin: true });
  if (!adminExists) {
    await AccessCode.create({
      code: ADMIN_PASSWORD,
      user: ADMIN_USERNAME,
      unit: 'Admin',
      isAdmin: true
    });
  }
}
initializeAdmin().catch(console.error);

// API Routes

// Verify access code
app.post('/api/verify', async (req: Request, res: Response) => {
  try {
    const { code } = req.body;
    const accessCode = await AccessCode.findOne({ code });
    const guestCode = await GuestCode.findOne({ code, used: false });
    
    const validCode = accessCode || guestCode;

    if (validCode) {
      if (guestCode) {
        guestCode.used = true;
        await guestCode.save();
      }

      await Log.create({
        timestamp: new Date(),
        code: validCode.code,
        user: validCode.user,
        unit: validCode.unit,
        success: true
      });

      res.json(validCode);
    } else {
      res.status(401).json({ error: 'Invalid code' });
    }
  } catch (error) {
    console.error('Error verifying code:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Create a new guest code
app.post('/api/guest-codes', async (req: Request, res: Response) => {
  try {
    const code = String(Math.floor(100000 + Math.random() * 900000));
    const guestCode = await GuestCode.create({
      code,
      user: 'Guest',
      unit: 'Guest Access',
      created: new Date(),
      used: false
    });
    res.json({ code: guestCode.code });
  } catch (error) {
    console.error('Error creating guest code:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Get access codes (admin only)
app.get('/api/access-codes', async (req: Request, res: Response) => {
  try {
    const accessCodes = await AccessCode.find().lean();
    res.json(accessCodes);
  } catch (error) {
    console.error('Error getting access codes:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Add access code (admin only)
app.post('/api/access-codes', async (req: Request, res: Response) => {
  try {
    const { code, user, unit, isAdmin } = req.body;
    const newAccessCode = await AccessCode.create({ code, user, unit, isAdmin });
    res.json(newAccessCode);
  } catch (error) {
    console.error('Error adding access code:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Remove access code (admin only)
app.delete('/api/access-codes/:code', async (req: Request, res: Response) => {
  try {
    const result = await AccessCode.findOneAndDelete({ code: req.params.code });
    if (result) {
      res.json({ success: true });
    } else {
      res.status(404).json({ error: 'Access code not found' });
    }
  } catch (error) {
    console.error('Error removing access code:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Get access logs (admin only)
app.get('/api/logs', async (req: Request, res: Response) => {
  try {
    const logs = await Log.find().sort({ timestamp: -1 }).lean();
    res.json(logs);
  } catch (error) {
    console.error('Error getting logs:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Get guest codes (admin only)
app.get('/api/guest-codes', async (req: Request, res: Response) => {
  try {
    const guestCodes = await GuestCode.find().lean();
    res.json(guestCodes);
  } catch (error) {
    console.error('Error getting guest codes:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Get local IP address
function getLocalIP() {
  const interfaces = os.networkInterfaces();
  for (const name of Object.keys(interfaces)) {
    const ifaces = interfaces[name];
    if (ifaces) {
      for (const iface of ifaces) {
        if (!iface.internal && iface.family === 'IPv4') {
          return iface.address;
        }
      }
    }
  }
  return 'localhost';
}

// Start server
app.listen(PORT, '0.0.0.0', () => {
  const localIP = getLocalIP();
  console.log('\n🚪 Door Access System is running!');
  console.log('\nAccess the app from:');
  console.log(`- This device: http://localhost:${PORT}`);
  console.log(`- Other devices: http://${localIP}:${PORT}`);
  console.log('\nPress Ctrl+C to stop the server');
});

================
File: start.sh
================
#!/bin/bash

# Kill any existing process on port 8000
lsof -ti:8000 | xargs kill -9 2>/dev/null

# Start Node.js server
nix-shell -p nodejs --run "node server.js"

================
File: styles/admin.css
================
.admin-container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

.admin-content {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: 30px;
    margin-top: 40px;
}

.section {
    background: var(--surface-color);
    border-radius: var(--border-radius);
    padding: 30px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
}

.section h2 {
    color: var(--primary-color);
    margin-bottom: 30px;
    font-size: 1.8rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.back-link {
    text-decoration: none;
    color: var(--text-color);
    font-weight: 500;
    padding: 12px 24px;
    border-radius: var(--border-radius);
    transition: all 0.3s ease;
    background: rgba(255, 255, 255, 0.1);
    font-size: 1.1rem;
}

.back-link:hover {
    background: rgba(255, 255, 255, 0.15);
    transform: translateY(-2px);
}

.action-button {
    background: var(--primary-color);
    color: var(--text-color);
    border: none;
    padding: 12px 24px;
    border-radius: var(--border-radius);
    cursor: pointer;
    font-weight: 500;
    transition: all 0.3s ease;
    font-size: 1.1rem;
}

.action-button:hover {
    background: var(--secondary-color);
    transform: translateY(-2px);
}

/* Access Codes List */
.codes-list {
    margin-top: 20px;
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.code-item {
    background: rgba(255, 255, 255, 0.05);
    border-radius: var(--border-radius);
    padding: 20px;
    display: grid;
    grid-template-columns: 1fr 1fr 1fr auto;
    gap: 20px;
    align-items: center;
    transition: all 0.3s ease;
}

.code-item:hover {
    background: rgba(255, 255, 255, 0.08);
    transform: translateX(5px);
}

.code-item > div {
    font-size: 1.1rem;
}

.code-item .delete-btn {
    background: var(--error-color);
    color: var(--text-color);
    border: none;
    padding: 10px 20px;
    border-radius: var(--border-radius);
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 1rem;
}

.code-item .delete-btn:hover {
    opacity: 0.9;
    transform: scale(1.05);
}

/* Logs List */
.logs-list {
    max-height: 600px;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    gap: 15px;
    padding-right: 10px;
}

.logs-list::-webkit-scrollbar {
    width: 8px;
}

.logs-list::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 4px;
}

.logs-list::-webkit-scrollbar-thumb {
    background: var(--primary-color);
    border-radius: 4px;
}

.log-item {
    background: rgba(255, 255, 255, 0.05);
    border-radius: var(--border-radius);
    padding: 15px 20px;
    display: grid;
    grid-template-columns: auto 1fr auto;
    gap: 20px;
    align-items: center;
    transition: all 0.3s ease;
}

.log-item:hover {
    background: rgba(255, 255, 255, 0.08);
}

.log-item .timestamp {
    color: rgba(255, 255, 255, 0.6);
    font-size: 0.9rem;
}

.log-item .success {
    color: var(--success-color);
    display: flex;
    align-items: center;
    gap: 5px;
}

.log-item .failure {
    color: var(--error-color);
    display: flex;
    align-items: center;
    gap: 5px;
}

/* Modal */
.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(5px);
    -webkit-backdrop-filter: blur(5px);
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.modal.active {
    display: flex;
    animation: fadeIn 0.3s ease;
}

.modal-content {
    background: var(--surface-color);
    padding: 40px;
    border-radius: var(--border-radius);
    width: 100%;
    max-width: 500px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
    transform: translateY(20px);
    animation: slideUp 0.3s ease forwards;
}

.modal-content h2 {
    color: var(--primary-color);
    margin-bottom: 30px;
    font-size: 1.8rem;
}

.form-group {
    margin-bottom: 25px;
}

.form-group label {
    display: block;
    margin-bottom: 10px;
    color: var(--text-color);
    font-size: 1.1rem;
}

.form-group input[type="text"] {
    width: 100%;
    padding: 12px;
    background: rgba(255, 255, 255, 0.1);
    border: 2px solid rgba(255, 255, 255, 0.2);
    border-radius: var(--border-radius);
    font-size: 1.1rem;
    color: var(--text-color);
    transition: all 0.3s ease;
}

.form-group input[type="text"]:focus {
    border-color: var(--primary-color);
    outline: none;
    background: rgba(255, 255, 255, 0.15);
}

.form-group.checkbox {
    display: flex;
    align-items: center;
    gap: 10px;
}

.form-group.checkbox label {
    margin: 0;
    cursor: pointer;
}

.form-group.checkbox input[type="checkbox"] {
    width: 20px;
    height: 20px;
    cursor: pointer;
}

.form-actions {
    display: flex;
    justify-content: flex-end;
    gap: 15px;
    margin-top: 30px;
}

.cancel-button {
    background: rgba(255, 255, 255, 0.1);
    color: var(--text-color);
    border: none;
    padding: 12px 24px;
    border-radius: var(--border-radius);
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 1.1rem;
}

.submit-button {
    background: var(--primary-color);
    color: var(--text-color);
    border: none;
    padding: 12px 24px;
    border-radius: var(--border-radius);
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 1.1rem;
}

.cancel-button:hover, .submit-button:hover {
    transform: translateY(-2px);
}

.submit-button:hover {
    background: var(--secondary-color);
}

/* Animations */
@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

@keyframes slideUp {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Responsive Design */
@media (max-width: 768px) {
    .admin-content {
        grid-template-columns: 1fr;
    }

    .code-item {
        grid-template-columns: 1fr 1fr;
        gap: 15px;
    }

    .code-item > div:nth-child(3) {
        grid-column: 1 / -1;
    }

    .modal-content {
        margin: 20px;
        padding: 20px;
    }
}

/* Touch Device Optimizations */
@media (hover: none) {
    .code-item:hover,
    .log-item:hover {
        transform: none;
    }
}

================
File: styles/main.css
================
:root {
    --primary-color: #2962ff;
    --secondary-color: #0039cb;
    --guest-color: #00bcd4;
    --guest-secondary: #0097a7;
    --background-color: #1a1a1a;
    --surface-color: #2d2d2d;
    --text-color: #ffffff;
    --error-color: #ff5252;
    --success-color: #69f0ae;
    --keypad-button-size: 90px;
    --border-radius: 16px;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Roboto', sans-serif;
    background-color: var(--background-color);
    color: var(--text-color);
    min-height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 20px;
    -webkit-tap-highlight-color: transparent;
    -webkit-touch-callout: none;
    user-select: none;
}

.container {
    width: 100%;
    max-width: 500px;
    padding: 30px;
    background-color: var(--surface-color);
    border-radius: var(--border-radius);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
}

header {
    text-align: center;
    margin-bottom: 40px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0 10px;
}

h1 {
    font-size: 2.5rem;
    font-weight: 700;
    color: var(--text-color);
    text-transform: uppercase;
    letter-spacing: 2px;
}

.time {
    font-size: 1.5rem;
    font-weight: 500;
    color: var(--primary-color);
}

.keypad-container {
    margin-bottom: 30px;
}

.display {
    background: rgba(255, 255, 255, 0.1);
    padding: 25px;
    text-align: center;
    border-radius: var(--border-radius);
    margin-bottom: 30px;
    min-height: 120px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 20px;
    transition: all 0.3s ease;
}

.display.pulse {
    transform: scale(1.02);
}

.display-text {
    font-size: 1.8rem;
    color: var(--text-color);
    opacity: 0.8;
}

.display-dots {
    display: flex;
    gap: 12px;
    justify-content: center;
}

.dot {
    width: 16px;
    height: 16px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.2);
    transition: all 0.3s ease;
}

.dot.filled {
    background: var(--primary-color);
    transform: scale(1.1);
}

.keypad {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 15px;
    padding: 10px;
}

.key {
    width: var(--keypad-button-size);
    height: var(--keypad-button-size);
    background: linear-gradient(145deg, #323232, #2a2a2a);
    border: none;
    color: var(--text-color);
    font-size: 2rem;
    border-radius: var(--border-radius);
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto;
    position: relative;
    overflow: hidden;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

.key::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(255, 255, 255, 0.1);
    opacity: 0;
    transition: opacity 0.3s;
    border-radius: var(--border-radius);
}

.key:hover::after {
    opacity: 1;
}

.key.pressed, .key.active {
    transform: scale(0.95);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    background: linear-gradient(145deg, #2a2a2a, #323232);
}

.key.clear {
    color: var(--error-color);
    font-size: 1.8rem;
}

.key.enter {
    color: var(--success-color);
    font-size: 2rem;
}

.status {
    text-align: center;
    padding: 20px 40px;
    border-radius: var(--border-radius);
    font-size: 1.5rem;
    font-weight: 500;
    opacity: 0;
    transition: all 0.3s ease;
    position: fixed;
    bottom: 40px;
    left: 50%;
    transform: translateX(-50%) translateY(20px);
    min-width: 300px;
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    z-index: 1000;
}

.status.animate-in {
    opacity: 1;
    transform: translateX(-50%) translateY(0);
}

.status.error {
    background-color: rgba(255, 82, 82, 0.2);
    color: var(--error-color);
    border: 2px solid var(--error-color);
}

.status.success {
    background-color: rgba(105, 240, 174, 0.2);
    color: var(--success-color);
    border: 2px solid var(--success-color);
}

.status.processing {
    background-color: rgba(41, 98, 255, 0.2);
    color: var(--primary-color);
    border: 2px solid var(--primary-color);
    animation: pulse 1.5s infinite;
}

/* Admin Mode Styles */
.display.admin-mode {
    border: 2px solid var(--primary-color);
    background: rgba(41, 98, 255, 0.05);
    box-shadow: 0 0 20px rgba(41, 98, 255, 0.1);
}

.display.admin-mode .display-text {
    color: var(--primary-color);
    font-weight: 500;
    text-shadow: 0 0 10px rgba(41, 98, 255, 0.3);
}

.display.admin-mode .dot.filled {
    background: var(--primary-color);
    box-shadow: 0 0 10px rgba(41, 98, 255, 0.3);
}

/* Guest Mode Styles */
.display.guest-mode {
    border: 2px solid var(--guest-color);
    background: rgba(0, 188, 212, 0.05);
    box-shadow: 0 0 20px rgba(0, 188, 212, 0.1);
}

.display.guest-mode .display-text {
    color: var(--guest-color);
    font-weight: 500;
    text-shadow: 0 0 10px rgba(0, 188, 212, 0.3);
}

.display.guest-mode .dot.filled {
    background: var(--guest-color);
    box-shadow: 0 0 10px rgba(0, 188, 212, 0.3);
}

/* Admin Access Button */
.admin-access {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 1000;
}

.admin-button {
    background: linear-gradient(145deg, var(--primary-color), var(--secondary-color));
    color: white;
    border: none;
    padding: 15px 25px;
    border-radius: var(--border-radius);
    cursor: pointer;
    font-size: 1.1rem;
    font-weight: 500;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(41, 98, 255, 0.3);
    display: flex;
    align-items: center;
    gap: 10px;
}

.admin-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(41, 98, 255, 0.4);
}

.admin-button:active, .admin-button.active {
    transform: translateY(1px);
    background: var(--secondary-color);
    box-shadow: 0 2px 10px rgba(41, 98, 255, 0.3);
}

/* Guest Access Button */
.guest-access {
    position: fixed;
    bottom: 20px;
    left: 20px;
    z-index: 1000;
}

.guest-button {
    background: linear-gradient(145deg, var(--guest-color), var(--guest-secondary));
    color: white;
    border: none;
    padding: 15px 25px;
    border-radius: var(--border-radius);
    cursor: pointer;
    font-size: 1.1rem;
    font-weight: 500;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(0, 188, 212, 0.3);
    display: flex;
    align-items: center;
    gap: 10px;
}

.guest-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(0, 188, 212, 0.4);
}

.guest-button:active, .guest-button.active {
    transform: translateY(1px);
    background: var(--guest-secondary);
    box-shadow: 0 2px 10px rgba(0, 188, 212, 0.3);
}

/* Modal Styles */
.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(5px);
    -webkit-backdrop-filter: blur(5px);
    justify-content: center;
    align-items: center;
    z-index: 2000;
    opacity: 0;
    transition: opacity 0.3s ease;
}

.modal.active {
    display: flex;
    opacity: 1;
}

.modal-content {
    background: var(--surface-color);
    padding: 30px;
    border-radius: var(--border-radius);
    width: 90%;
    max-width: 400px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
    transform: translateY(20px);
    transition: transform 0.3s ease;
    animation: slideUp 0.3s ease forwards;
}

.modal h2 {
    color: var(--text-color);
    margin-bottom: 20px;
    font-size: 1.8rem;
    text-align: center;
}

.guest-code-display {
    background: rgba(0, 188, 212, 0.1);
    border: 2px solid var(--guest-color);
    border-radius: var(--border-radius);
    padding: 20px;
    margin: 20px 0;
    text-align: center;
}

.guest-code-display .code {
    font-size: 2.5rem;
    font-weight: 700;
    color: var(--guest-color);
    letter-spacing: 4px;
    margin: 10px 0;
    text-shadow: 0 0 10px rgba(0, 188, 212, 0.3);
}

.guest-code-display .code-info {
    color: rgba(255, 255, 255, 0.7);
    font-size: 0.9rem;
    margin-top: 10px;
}

.modal-actions {
    display: flex;
    gap: 10px;
    justify-content: center;
    margin-top: 20px;
}

.copy-button, .close-button {
    padding: 12px 24px;
    border-radius: var(--border-radius);
    border: none;
    font-size: 1.1rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    flex: 1;
}

.copy-button {
    background: var(--guest-color);
    color: white;
}

.copy-button:hover {
    background: var(--guest-secondary);
    transform: translateY(-2px);
}

.close-button {
    background: rgba(255, 255, 255, 0.1);
    color: var(--text-color);
}

.close-button:hover {
    background: rgba(255, 255, 255, 0.15);
    transform: translateY(-2px);
}

/* Animations */
@keyframes slideUp {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes successPulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.02); background: rgba(105, 240, 174, 0.2); }
    100% { transform: scale(1); }
}

@keyframes errorShake {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-10px); }
    75% { transform: translateX(10px); }
}

@keyframes pulse {
    0% { opacity: 0.6; }
    50% { opacity: 1; }
    100% { opacity: 0.6; }
}

/* Responsive Design */
@media (max-width: 768px) {
    :root {
        --keypad-button-size: 70px;
    }

    .container {
        padding: 20px;
    }

    h1 {
        font-size: 2rem;
    }

    .time {
        font-size: 1.2rem;
    }

    .display {
        padding: 20px;
        min-height: 100px;
    }

    .display-text {
        font-size: 1.5rem;
    }

    .dot {
        width: 12px;
        height: 12px;
    }

    .key {
        font-size: 1.8rem;
    }

    .status {
        font-size: 1.2rem;
        padding: 15px 30px;
        min-width: 250px;
    }

    .admin-access, .guest-access {
        bottom: 15px;
    }

    .admin-button, .guest-button {
        padding: 12px 20px;
        font-size: 1rem;
    }

    .guest-code-display .code {
        font-size: 2rem;
    }
}

/* Prevent text selection */
.key, .display, .status, .time, .guest-code-display .code {
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

/* Add smooth transitions */
.key, .admin-button, .guest-button, .status, .dot {
    will-change: transform, opacity;
}

/* Touch device optimizations */
@media (hover: none) {
    .key:hover::after,
    .admin-button:hover,
    .guest-button:hover,
    .copy-button:hover,
    .close-button:hover {
        transform: none;
    }
}

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "es2018",
    "module": "commonjs",
    "outDir": "./dist",
    "rootDir": "./",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true
  },
  "include": [
    "*.ts",
    "models/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}
